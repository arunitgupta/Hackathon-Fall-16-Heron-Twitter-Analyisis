package com.mnp.twittersource.bolts;

import java.io.File;
import java.io.IOException;
import java.util.Map;

import org.apache.commons.io.FileUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.zeromq.ZMQ;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mnp.herontweets.tools.DataGeneratorSource;
import com.mnp.herontweets.tools.Rankings;

import backtype.storm.task.TopologyContext;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.tuple.Tuple;

/**
 * This bolt merges incoming {@link Rankings}.
 * 
 * It can be used to merge intermediate rankings generated by
 * {@link IntermediateRankingsBolt} into a final, consolidated ranking. To do
 * so, configure this bolt with a globalGrouping on
 * {@link IntermediateRankingsBolt}.
 * 
 */
public final class TotalRankingsBolt extends AbstractRankerBolt {

	private static final long serialVersionUID = -8447525895532302198L;
	private ZMQ.Socket sender;
	private ZMQ.Context context;
	String s= null;
	DataGeneratorSource d;
	public TotalRankingsBolt() {
		super();
	}

	public TotalRankingsBolt(int topN) {
		super(topN);
	}

	public TotalRankingsBolt(int topN, int emitFrequencyInSeconds) {
		super(topN, emitFrequencyInSeconds);
	}

	@Override
	public void prepare(Map conf, TopologyContext ctx) {
		
	}

	@Override
	void updateRankingsWithTuple(Tuple tuple) {
		Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
		super.getRankings().updateWith(rankingsToBeMerged);
	}

	@Override
	public void declareOutputFields(OutputFieldsDeclarer ofd) {
	}

	@Override
	public void emitRankings(BasicOutputCollector collector) {
		ObjectMapper objectMapper = new ObjectMapper();
		String json = "";
		try {
			json = objectMapper.writeValueAsString(getRankings());
		} catch (Exception e) {
			e.printStackTrace();
		}
		d = new DataGeneratorSource();
		System.out.println(json);
		d.dataGenerator(json);
	//	sender.send(json.getBytes(), 0);
		
	}
}
